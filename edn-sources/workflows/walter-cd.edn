{:name "Walter CD"
 :on {:repository_dispatch nil
      :workflow_dispatch {:inputs {:walter-version {:description "Walter bin version"
                                                    :required false
                                                    :type :string}
                                   :version-to-release {:description "Version to release"
                                                        :required false
                                                        :type :string}}}
      :push {:branches "**"}}
 :env #walter/env #{:git :walter-version :version-to-release :deploy-identities}
 :jobs {:run-tests
        {:runs-on "ubuntu-latest"
         :name "Run tests"
         :steps [{:uses "piotr-yuxuan/walter-ci@main"
                  :with {:github-token "${{ secrets.GITHUB_TOKEN }}"}}
                 {:run "lein with-profile +walter/kaocha,+kaocha run -m kaocha.runner --skip-meta :slow --skip-meta :perf"}]}

        :build-artifacts
        {:runs-on "ubuntu-latest"
         :name "Build artifacts"
         :if "${{ github.event.inputs.version-to-release != '' }}"
         :steps [{:uses "piotr-yuxuan/walter-ci@main"
                  :with {:github-token "${{ secrets.GITHUB_TOKEN }}"}}
                 {:name "Set project version to ${{ github.event.inputs.version-to-release }}"
                  :run #line/join["VERSION_FILE=$(ls resources/*.version)"
                                  "echo ${VERSION_TO_RELEASE} > ${VERSION_FILE}"
                                  "git add ${VERSION_FILE}"]}
                 {:run "lein uberjar"}
                 {:run "lein with-profile uberjar pom"}
                 {:uses "actions/upload-artifact@v3"
                  :with {:name "jars"
                         :path #line/join["target/**.jar" "pom.xml"]}}]}

        :release-artifacts
        {:runs-on "ubuntu-latest"
         :name "Release artifacts"
         :if "${{ github.event.inputs.version-to-release != '' }}"
         :needs [:run-tests :build-artifacts]
         :steps [{:uses "piotr-yuxuan/walter-ci@main"
                  :with {:github-token "${{ secrets.GITHUB_TOKEN }}"}}
                 {:name "Set project version to ${{ github.event.inputs.version-to-release }}"
                  :run #line/join["VERSION_FILE=$(ls resources/*.version)"
                                  "echo ${VERSION_TO_RELEASE} > ${VERSION_FILE}"
                                  "git add ${VERSION_FILE}"]}
                 {:name "Retrieve artifacts"
                  :uses "actions/download-artifact@v3"
                  :if "${{ github.event.inputs.version-to-release != '' }}"
                  :with {:name "jars"
                         :path "."}}
                 #step :git/diff
                 {:run "git commit -m \"Version ${VERSION_TO_RELEASE}\" -m \"[skip ci]\""
                  :if "steps.diff.outcome == 'failure'"}
                 {:run "git tag -a ${VERSION_TO_RELEASE} -m \"Version ${VERSION_TO_RELEASE}\""
                  :if "steps.diff.outcome == 'failure'"}
                 {:run "git push --follow-tags" ; Don't try to rebase, we want to keep the tag.
                  :if "steps.diff.outcome == 'failure'"}
                 {:run "tree -Chup ."}
                 {:uses "softprops/action-gh-release@fe9a9bd3295828558c7a3c004f23f3bf77d155b2"
                  :with {:generate_release_notes true
                         :tag_name "${{ github.event.inputs.version-to-release }}"
                         :draft false
                         :prerelease false
                         :fail_on_unmatched_files true
                         :files "./target/**-standalone.jar"}}
                 {:name "Deploy on Clojars?"
                  :id "target-clojars"
                  :run "lein pprint :deploy-repositories | bb --stream -I --eval '(System/exit (if (contains? (into {} *input*) (first *command-line-args*)) 0 1))' \"clojars\""
                  :continue-on-error true}
                 {:name "lein deploy clojars"
                  :if "steps.target-clojars.outcome == 'success'"
                  :run "walter retry"
                  :env {:WALTER_TRY "lein deploy clojars"}}
                 {:name "Deploy on GitHub?"
                  :id "target-github"
                  :run "lein pprint :deploy-repositories | bb --stream -I --eval '(System/exit (if (contains? (into {} *input*) (first *command-line-args*)) 0 1))' \"github\""
                  :continue-on-error true}
                 {:name "lein deploy github"
                  :if "steps.target-github.outcome == 'success'"
                  :run "walter retry"
                  :env {:WALTER_TRY "lein deploy github"}}
                 {:name "Build cljdoc ahead of the first visitor"
                  :run #line/join["PROJECT_GROUP=$(lein pprint --no-pretty -- :group)"
                                  "PROJECT_NAME=$(lein pprint --no-pretty -- :name)"
                                  #line/break ["curl 'https://cljdoc.org/api/request-build2'"
                                               "-X POST"
                                               "-H \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:100.0) Gecko/20100101 Firefox/100.0\""
                                               "-H \"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\""
                                               "-H \"Accept-Language: en-US,en;q=0.5\""
                                               "-H \"Accept-Encoding: gzip, deflate, br\""
                                               "-H \"Content-Type: application/x-www-form-urlencoded\""
                                               "-H \"Origin: https://cljdoc.org\""
                                               "-H \"DNT: 1\""
                                               "-H \"Connection: keep-alive\""
                                               "-H \"Referer: https://cljdoc.org/d/${PROJECT_GROUP}/${PROJECT_NAME}/${VERSION_TO_RELEASE}\""
                                               "-H \"Upgrade-Insecure-Requests: 1\""
                                               "-H \"Sec-Fetch-Dest: document\""
                                               "-H \"Sec-Fetch-Mode: navigate\""
                                               "-H \"Sec-Fetch-Site: same-origin\""
                                               "-H \"Sec-Fetch-User: ?1\""
                                               "-H \"TE: trailers\""
                                               "--data-raw \"project=${PROJECT_GROUP}%2F${PROJECT_NAME}&version=${VERSION_TO_RELEASE}\""]]}]}}}
