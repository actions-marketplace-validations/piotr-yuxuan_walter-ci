{:name "Walter CD"
 :on {:workflow_dispatch nil
      :repository_dispatch nil
      :push {:branches "*"}}
 :concurrency {:group "walter-cd"
               :cancel-in-progress true}
 :env #walter/env #{:git}
 :jobs {:run-tests
        {:runs-on "ubuntu-latest"
         :name "Run tests"
         :steps [{:uses "piotr-yuxuan/walter-ci@main"}
                 {:run "lein with-profile +walter/kaocha,+kaocha run -m kaocha.runner --skip-meta :slow --skip-meta :perf"}]}

        :report-vulnerabilities
        {:runs-on "ubuntu-latest"
         :name "Scan and report vulnerabilities"
         :steps [{:uses "piotr-yuxuan/walter-ci@main"}
                 {:uses "actions/cache@8f1e2e02865c42348f9baddbbaafb1841dce610a"
                  :with {:path #line/join["~/.m2/repository"]
                         :key "${{ runner.os }}-nvd-${{ hashFiles('**/project.clj') }}"
                         :restore-keys "${{ runner.os }}-maven-"}}
                 {:run "git rm \"./doc/Known vulnerabilities.txt\""
                  :continue-on-error true}
                 {:run "clojure -T:security/nvd nvd.task/check :classpath '\"'\"$(lein with-profile -user,-dev classpath)\"'\"'"
                  :continue-on-error true}
                 {:run "bb \"$HOME/.walter-ci/cut-nvd.clj\" ./target/nvd/dependency-check-report.csv"}
                 {:run "cp ./target/nvd/dependency-check-report.csv ./doc/known-vulnerabilities.csv"}
                 {:run "git add ./doc/known-vulnerabilities.csv"}
                 #step :git/diff
                 {:run "git commit --message \"Update known vulnerabilities\""
                  :if "steps.diff.outcome == 'failure'"}
                 #step :git/push]}

        :list-licenses
        {:runs-on "ubuntu-latest"
         :name "List dependency licenses"
         :steps [{:uses "piotr-yuxuan/walter-ci@main"}
                 {:run "lein licenses :csv > ./doc/Licenses.csv"}
                 {:run "sort -o ./doc/Licenses.csv{,}"}
                 {:run "awk -i inplace 'BEGINFILE{print \"Library name,Version,License name\"}{print}' ./doc/Licenses.csv"}
                 {:run "git add ./doc/Licenses.csv"}
                 #step :git/diff
                 {:run "git commit --message \"List dependency licenses\""
                  :if "steps.diff.outcome == 'failure'"}
                 #step :git/push]}

        :release-artifacts
        {:runs-on "ubuntu-latest"
         :name "Release artifacts"
         :if "${{ startsWith(github.ref, 'refs/tags/') }}"
         :needs :run-tests
         :environment {:name "release"}
         :steps [{:uses "piotr-yuxuan/walter-ci@main"}
                 {:run "lein uberjar"}
                 {:if false
                  :name "lein deploy clojars"
                  :run "walter retry"
                  :env {:WALTER_TRY "lein deploy clojars"}}
                 {:if false
                  :name "lein deploy github"
                  :run "walter retry"
                  :env {:WALTER_TRY "lein deploy github"}}
                 {:if false
                  :uses "softprops/action-gh-release@fe9a9bd3295828558c7a3c004f23f3bf77d155b2"
                  :with {:generate_release_notes true
                         :draft true
                         :files "target/*-standalone.jar"}}]}}}
