{:name "Walter CD"
 :on {:repository_dispatch nil
      :workflow_dispatch {:inputs {:walter-version {:description "Walter bin version"
                                                    :required false
                                                    :type :string}
                                   :version-to-release {:description "Version to release"
                                                        :required false
                                                        :type :string}}}
      :push {:branches "**"}}
 :env #walter/env #{:git :walter-version :version-to-release :deploy-identities}
 :jobs {:run-tests
        {:runs-on "ubuntu-latest"
         :name "Run tests"
         :steps [{:uses "piotr-yuxuan/walter-ci@main"}
                 {:run "lein with-profile +walter/kaocha,+kaocha run -m kaocha.runner --skip-meta :slow --skip-meta :perf"}]}

        :build-artifacts
        {:runs-on "ubuntu-latest"
         :name "Build artifacts"
         :if "${{ github.event.inputs.version-to-release != '' }}"
         :steps [{:uses "piotr-yuxuan/walter-ci@main"}
                 {:name "Set project version to ${{ github.event.inputs.version-to-release }}"
                  :run #line/join["VERSION_FILE=$(ls resources/*.version)"
                                  "echo ${VERSION_TO_RELEASE} > ${VERSION_FILE}"
                                  "git add ${VERSION_FILE}"]}
                 {:run "lein uberjar"}
                 {:run "lein with-profile uberjar pom"}
                 {:uses "actions/upload-artifact@v3"
                  :with {:name "jars"
                         :path #line/join["target/*.jar" "pom.xml"]}}]}

        :release-artifacts
        {:runs-on "ubuntu-latest"
         :name "Release artifacts"
         :if "${{ github.event.inputs.version-to-release != '' }}"
         :needs [:run-tests :build-artifacts]
         :steps [{:uses "piotr-yuxuan/walter-ci@main"}
                 {:name "Set project version to ${{ github.event.inputs.version-to-release }}"
                  :run #line/join["VERSION_FILE=$(ls resources/*.version)"
                                  "echo ${VERSION_TO_RELEASE} > ${VERSION_FILE}"
                                  "git add ${VERSION_FILE}"]}
                 {:name "Retrieve artifacts"
                  :uses "actions/download-artifact@v3"
                  :if "${{ github.event.inputs.version-to-release != '' }}"
                  :with {:name "jars"
                         :path "target"}}
                 {:run "tree -L 1 -Chup ./target"}
                 #step :git/diff
                 {:run "git commit -m \"Version ${VERSION_TO_RELEASE}\" -m \"[skip ci]\""
                  :if "steps.diff.outcome == 'failure'"}
                 {:run "git tag -a ${VERSION_TO_RELEASE} -m \"Version ${VERSION_TO_RELEASE}\""
                  :if "steps.diff.outcome == 'failure'"}
                 {:run "git push --follow-tags" ; Don't try to rebase, we want to keep the tag.
                  :if "steps.diff.outcome == 'failure'"}
                 {:uses "softprops/action-gh-release@fe9a9bd3295828558c7a3c004f23f3bf77d155b2"
                  :with {:generate_release_notes true
                         :tag_name "${{ github.event.inputs.version-to-release }}"
                         :draft false
                         :prerelease false
                         :fail_on_unmatched_files false
                         :files "target/*-standalone.jar"}}
                 {:name "Deploy on Clojars?"
                  :id "target-clojars"
                  :run "lein pprint :deploy-repositories | bb --stream -I --eval '(System/exit (if (contains? (into {} *input*) (first *command-line-args*)) 0 1))' \"clojars\""
                  :continue-on-error true}
                 {:name "lein deploy clojars"
                  :if "steps.target-clojars.outcome == 'success'"
                  :run "walter retry"
                  :env {:WALTER_TRY "lein deploy clojars"}}
                 {:name "Deploy on GitHub?"
                  :id "target-github"
                  :run "lein pprint :deploy-repositories | bb --stream -I --eval '(System/exit (if (contains? (into {} *input*) (first *command-line-args*)) 0 1))' \"github\""
                  :continue-on-error true}
                 {:name "lein deploy github"
                  :if "steps.target-github.outcome == 'success'"
                  :run "walter retry"
                  :env {:WALTER_TRY "lein deploy github"}}
                 {:name "Build cljdoc ahead of the first visitor"
                  :run #line/join ["curl 'https://cljdoc.org/api/request-build2' \\"
                                   "-H 'Content-Type: application/x-www-form-urlencoded' \\"
                                   "-H 'Origin: https://cljdoc.org' \\"
                                   "-H 'Referer: https://cljdoc.org/d/com.github.piotr-yuxuan/walter-ci/${VERSION_TO_RELEASE}' \\"
                                   "--data-raw 'project=com.github.piotr-yuxuan%2Fwalter-ci&version=${VERSION_TO_RELEASE}'"]}]}}}
