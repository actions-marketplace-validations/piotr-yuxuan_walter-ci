{:name "Walter CI"
 :on {:repository_dispatch nil
      :workflow_dispatch {:inputs {:walter-version {:description "Walter bin version"
                                                    :required false
                                                    :type :string}}}
      :push {:branches "**"}
      :schedule [{:cron "28 6,18 * * *"}]}
 :concurrency {:group "walter-ci", :cancel-in-progress true}
 :env #walter/env #{:git :walter-version}
 :jobs {:conform-repository
        {:runs-on "ubuntu-latest"
         :name "Conform GitHub repository"
         :env {:WALTER_ACTOR "${{ secrets.WALTER_ACTOR }}"
               :WALTER_GITHUB_PASSWORD "${{ secrets.WALTER_GITHUB_PASSWORD }}"}
         :steps [{:uses "piotr-yuxuan/walter-ci@main"}
                 {:run "walter conform-repository"}
                 {:run "git add .github/CODEOWNERS.yml"}
                 {:run "git add .github/FUNDING.yml"}
                 #step :git/diff
                 {:run "git commit --message \"Conform repository\""
                  :if "steps.diff.outcome == 'failure'"}
                 #step :git/push]}

        :update-gitignore
        {:runs-on "ubuntu-latest"
         :name "Update .gitignore"
         :steps [{:uses "piotr-yuxuan/walter-ci@main"}
                 {:run "walter update-git-ignore"}
                 {:run "git add .gitignore"}
                 #step :git/diff
                 {:run "git commit --message \"Update .gitignore\""
                  :if "steps.diff.outcome == 'failure'"}
                 #step :git/push]}

        :ns-sort
        {:runs-on "ubuntu-latest"
         :name "Sort namespace forms"
         :steps [{:uses "piotr-yuxuan/walter-ci@main"}
                 {:run "lein help"}
                 {:run "lein ns-sort"}
                 {:run "git add ."}
                 #step :git/diff
                 {:run "git commit --message \"Sort namespace forms\""
                  :if "steps.diff.outcome == 'failure'"}
                 #step :git/push]}

        :build-artifacts
        {:runs-on "ubuntu-latest"
         :name "Build artifacts"
         :steps [{:uses "piotr-yuxuan/walter-ci@main"}
                 {:name "Set project version to ${{ github.event.inputs.version-to-release }}"
                  :run #line/join["VERSION_FILE=$(ls resources/*.version)"
                                  "echo ${VERSION_TO_RELEASE} > ${VERSION_FILE}"
                                  "git add ${VERSION_FILE}"]}
                 {:run "lein uberjar"}
                 {:run "lein with-profile uberjar pom"}
                 {:uses "actions/upload-artifact@v3"
                  :with {:name "jars"
                         :path #line/join["target/*.jar" "pom.xml"]}}]}

        :list-licenses
        {:runs-on "ubuntu-latest"
         :name "List dependency licenses"
         :steps [{:uses "piotr-yuxuan/walter-ci@main"}
                 {:run "lein licenses :csv > ./doc/Licenses.csv"}
                 {:run "sort -o ./doc/Licenses.csv{,}"}
                 {:run "awk -i inplace 'BEGINFILE{print \"Library name,Version,License name\"}{print}' ./doc/Licenses.csv"}
                 {:run "git add ./doc/Licenses.csv"}
                 #step :git/diff
                 {:run "git commit --message \"List dependency licenses\""
                  :if "steps.diff.outcome == 'failure'"}
                 #step :git/push]}

        :clj-kondo
        {:runs-on "ubuntu-latest"
         :name "clj-kondo, a linter for Clojure"
         :steps [{:uses "piotr-yuxuan/walter-ci@main"}
                 {:uses "DeLaGuardo/clojure-lint-action@2d6013175031096ae07bc9b90a07173029ad7dc9"
                  :with {:clj-kondo-args "--lint src test"
                         :github_token "${{ secrets.GITHUB_TOKEN }}"}
                  :continue-on-error true}]}

        :code-coverage
        {:runs-on "ubuntu-latest"
         :name "Code coverage"
         :steps [{:uses "piotr-yuxuan/walter-ci@main"}
                 {:uses "actions/cache@8f1e2e02865c42348f9baddbbaafb1841dce610a"
                  :with {:path #line/join["~/.m2/repository"]
                         :key "${{ runner.os }}-perf-${{ hashFiles('**/project.clj') }}"
                         :restore-keys "${{ runner.os }}-maven-"}}
                 {:run "git rm ./doc/code-coverage/"
                  :continue-on-error true}
                 {:run "lein with-profile +walter/kaocha,+kaocha run -m kaocha.runner --plugin cloverage --cov-output ./doc/code-coverage --skip-meta :slow --skip-meta :perf --cov-text --cov-html"}
                 {:run "git add ./doc/code-coverage/**.{txt,css,html}"}
                 #step :git/diff
                 {:run "git commit --message \"Update code coverage\""
                  :if "steps.diff.outcome == 'failure'"}
                 #step :git/push]}

        :idiomatic-code
        {:runs-on "ubuntu-latest"
         :name "Idiomatic code"
         :steps [{:uses "piotr-yuxuan/walter-ci@main"}
                 {:run "clojure -M:lint/idiom -- --replace"}
                 {:run "git add ."}
                 #step :git/diff
                 {:run "git commit --message \"More idiomatic code\""
                  :if "steps.diff.outcome == 'failure'"}
                 #step :git/push]}

        :update-dependencies
        {:runs-on "ubuntu-latest"
         :name "Update dependency versions"
         :steps [{:uses "piotr-yuxuan/walter-ci@main"}
                 {:run "lein ancient upgrade :no-tests :all :recursive :check-clojure :allow-qualified"}
                 {:run "lein with-profile +walter/kaocha,+kaocha run -m kaocha.runner --skip-meta :slow --skip-meta :perf"}
                 {:run "git add ."}
                 #step :git/diff
                 {:run "git commit --message \"Update dependency versions\""
                  :if "steps.diff.outcome == 'failure'"}
                 #step :git/push]}

        :security-nvd
        {:runs-on "ubuntu-latest"
         :name "Clojure nvd vulnerabilities"
         :steps [{:uses "piotr-yuxuan/walter-ci@main"}
                 {:uses "actions/cache@8f1e2e02865c42348f9baddbbaafb1841dce610a"
                  :with {:path #line/join["~/.m2/repository"]
                         :key "${{ runner.os }}-nvd-${{ hashFiles('**/project.clj') }}"
                         :restore-keys "${{ runner.os }}-maven-"}}
                 {:run "git rm \"./doc/Known vulnerabilities.txt\""
                  :continue-on-error true}
                 {:run "clojure -Ttools install nvd-clojure/nvd-clojure '{:mvn/version \"RELEASE\"}' :as nvd"}
                 {:run "clojure -Tnvd nvd.task/check :classpath '\"'\"$(lein with-profile -user,-dev classpath)\"'\"'"
                  :continue-on-error true}
                 {:run "bb \"$HOME/.walter-ci/cut-nvd.clj\" ./target/nvd/dependency-check-report.csv"
                  :continue-on-error true}
                 {:run "cp ./target/nvd/dependency-check-report.csv ./doc/known-vulnerabilities.csv"}
                 {:run "git add ./doc/known-vulnerabilities.csv"}
                 #step :git/diff
                 {:run "git commit --message \"Update known vulnerabilities\""
                  :if "steps.diff.outcome == 'failure'"}
                 #step :git/push]}

        :security-sarif-clojure
        {:runs-on "ubuntu-latest"
         :name "Clojure clj-holmes vulnerabilities"
         :steps [{:uses "piotr-yuxuan/walter-ci@main"}
                 {:uses "clj-holmes/clj-holmes-action@200d2d03900917d7eb3c24fc691ab83579a87fcb"
                  :with {:output-type "sarif"
                         :output-file "tfsec.sarif"
                         :fail-on-result "false"}}
                 {:name "Upload analysis results to GitHub Security tab"
                  :uses "github/codeql-action/upload-sarif@v2"
                  :with {:sarif_file "tfsec.sarif"
                         :wait-for-processing true}}]}

        :security-sarif-terraform
        {:runs-on "ubuntu-latest"
         :name "Terraform tfsec vulnerabilities"
         :steps [{:uses "piotr-yuxuan/walter-ci@main"}
                 {:uses "aquasecurity/tfsec-sarif-action@9b703869c5108700605056134506e274ef6e9bd3"
                  :with {:sarif_file "tfsec.sarif"}}
                 {:name "Upload analysis results to GitHub Security tab"
                  :uses "github/codeql-action/upload-sarif@v2"
                  :with {:sarif_file "tfsec.sarif"
                         :wait-for-processing true}}]}

        :security-trivy-fs
        {:runs-on "ubuntu-latest"
         :name "General Trivy security scanner"
         :env {"TRIVY_CACHE_DIR" "${HOME}/.trivy-cache-dir"}
         :needs [:build-artifacts]
         :permissions {:security-events "write"}
         :steps [{:uses "piotr-yuxuan/walter-ci@main"}
                 {:name "Retrieve artifacts"
                  :uses "actions/download-artifact@v3"
                  :with {:name "jars"
                         :path "target"}}
                 {:uses "actions/cache@8f1e2e02865c42348f9baddbbaafb1841dce610a"
                  :with {:path "${TRIVY_CACHE_DIR}"
                         :key "${{ runner.os }}-nvd-${{ hashFiles('**/project.clj') }}"
                         :restore-keys "${{ runner.os }}-trivy-"}}
                 {:uses "aquasecurity/trivy-action@master"
                  :continue-on-error true
                  :with {:scan-type "fs"
                         :cache-dir "${TRIVY_CACHE_DIR}"
                         :security-checks "vuln,config"
                         :output "trivy-results.sarif"
                         :ignore-unfixed true
                         :format "sarif"}}
                 {:name "Upload analysis results to GitHub Security tab"
                  :uses "github/codeql-action/upload-sarif@v2"
                  :with {:sarif_file "trivy-results.sarif"
                         :wait-for-processing true}}]}

        :detect-secrets
        {:runs-on "ubuntu-latest"
         :name "Detect secrets on a repository"
         :steps [{:uses "piotr-yuxuan/walter-ci@main"}
                 {:uses "RobertFischer/detect-secrets-action@v2.0.0"}
                 {:run "mv .secrets.baseline ./doc" :continue-on-error true}
                 {:run "git add ./doc/.secrets.baseline" :continue-on-error true}
                 #step :git/diff
                 {:run "git commit --message \"Detected change in secrets\""
                  :if "steps.diff.outcome == 'failure'"}
                 #step :git/push]}}}
